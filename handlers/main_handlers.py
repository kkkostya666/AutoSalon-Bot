import re

from aiogram import Router
from aiogram import types
from aiogram.filters import CommandStart
from aiogram import F
from aiogram.fsm.context import FSMContext

from keyboards.get_start_keyboard import get_start_keyboard, get_order_keyboard
from keyboards import msk
import text
from bd import Db
router = Router()
db = Db()
current_index = 0


@router.callback_query(F.data == "katalog")
async def create_order(callback: types.CallbackQuery):
    global current_index
    results = db.select_all_auto_data()
    if results:
        result = results[current_index]
        formatted_text = f"üìç <b>–ú–∞—Ä–∫–∞:</b> {result[2]}\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}\n\n{result[4]}\n<b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞: {result[6]} —à—Ç—É–∫</b>\nüí™ <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {result[7]}"
        await callback.message.answer(formatted_text, reply_markup=await get_order_keyboard())
    else:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–∞—Ö")


@router.callback_query(F.data == "next")
async def create_order(callback: types.CallbackQuery):
    global current_index
    current_index += 1
    results = db.select_all_auto_data()
    if results and current_index < len(results):
        result = results[current_index]
        formatted_text = f"üìç <b>–ú–∞—Ä–∫–∞:</b> {result[2]}\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}\n\n{result[4]}\n<b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞: {result[6]} —à—Ç—É–∫</b>\nüí™ <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {result[7]}"
        await callback.message.edit_text(formatted_text, reply_markup=await get_order_keyboard())
    else:
        current_index = 0
        results = db.select_all_auto_data()
        if results:
            result = results[current_index]
            formatted_text = f"üìç <b>–ú–∞—Ä–∫–∞:</b> {result[2]}\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}\n\n{result[4]}\n<b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞: {result[6]} —à—Ç—É–∫</b>\nüí™ <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {result[7]}"
            await callback.message.edit_text(formatted_text, reply_markup=await get_order_keyboard())
        else:
            await callback.message.edit_text("No data available")


@router.callback_query(F.data == "create_order")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    message = callback.message.text
    address_pattern = re.compile(r"üìç –ú–∞—Ä–∫–∞: (.+)")
    address_match = address_pattern.search(message)
    if address_match:
        full_address = address_match.group(1).strip()
        name_auto = db.select_id_by_name_auto(full_address)
        db.insert_order(1, name_auto, status="–í —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
        await callback.message.answer(text="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.\n–û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
    else:
        print("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")


@router.callback_query(F.data == "find_auto")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    results = db.select_all_orders_with_details_user("kkkostya666")
    if results:
        message_text = ""
        for result in results:
            formatted_text = (
                f"üìç <b>–ú–∞—Ä–∫–∞:</b> {result[2]}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}\n\n"
                f"{result[4]}\n"
                f"<b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞: {result[6]} —à—Ç—É–∫</b>\n"
                f"üí™ <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {result[7]}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {result[8]}\n\n"
            )
            message_text += formatted_text

        await callback.message.edit_text(message_text, reply_markup=msk.main_msk)
    else:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
