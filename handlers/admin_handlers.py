import os
import uuid

from aiogram import types, Router
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from keyboards import admin_keyboard
from state.admin import AdminState
from bd import Db

ADMIN_IDS = "1383157406"
db = Db()
router = Router()



@router.message(Command("admin"))
async def cmd_start(message: types.Message):
    if str(message.from_user.id) == ADMIN_IDS:
        await message.reply("–ü—Ä–∏–≤–µ—Ç!üëã –≠—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞.", reply_markup=admin_keyboard.main_admin)
    else:
        await message.answer(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")


@router.callback_query(F.data == "kategory_admin")
async def category_admin(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(text="üìç–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", reply_markup=admin_keyboard.kategory_admin)


@router.callback_query(F.data == "back_admin")
async def category_admin(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(text="üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_keyboard.main_admin)


@router.callback_query(F.data == "add_category")
async def add_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å...",
                                  reply_markup=admin_keyboard.back_admin)
    await state.set_state(AdminState.category)
    await callback.message.delete()


@router.message(AdminState.category)
async def category_state(msg: types.Message, state: FSMContext):
    category = msg.text
    db.insert_category(category)
    await msg.answer(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await msg.answer(text="üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_keyboard.main_admin)
    await state.clear()


@router.callback_query(F.data == "get_category")
async def get_categories(callback: types.CallbackQuery):
    categories = db.select_category()
    if not categories:
        await callback.message.answer(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!", reply_markup=admin_keyboard.kategory_admin)
    else:
        categories_text = "\n\n".join(
            f"<b>ID:</b> {category[0]}\n<b>–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category[1]}" for category in categories)
        await callback.message.answer(text=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_text}",
                                      reply_markup=admin_keyboard.kategory_admin)
    await callback.message.delete()


@router.callback_query(F.data == "delete_category")
async def get_categories(callback: types.CallbackQuery, state: FSMContext):
    category_select = db.select_category()

    if not category_select:
        await callback.message.answer(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    categories_text = "\n\n".join(
        f"<b>ID:</b> {category[0]}\n<b>–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category[1]}" for category in category_select)
    await callback.message.answer(text=f"<b>–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n{categories_text}")
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å!")
    await state.set_state(AdminState.delete_category)
    await callback.message.delete()


@router.message(AdminState.delete_category)
async def category_state(msg: types.Message, state: FSMContext):
    category_id = msg.text
    if not db.delete_category_by_id(category_id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        await msg.answer(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await msg.answer(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    await msg.answer(text="üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_keyboard.main_admin)
    await state.clear()


# –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ

@router.callback_query(F.data == "katalog_admin")
async def get_categories(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("üìç–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ", reply_markup=admin_keyboard.auto_admin)


@router.callback_query(F.data == "add_auto")
async def get_categories(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã!</b>", reply_markup=admin_keyboard.back_admin)
    await state.set_state(AdminState.name_auto)


@router.message(AdminState.name_auto)
async def category_state(msg: types.Message, state: FSMContext):
    name_auto = msg.text
    await state.update_data(name_auto=name_auto)
    await msg.answer(text="<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –º–∞—à–∏–Ω—ã!</b>", reply_markup=admin_keyboard.back_admin)
    await state.set_state(AdminState.price)


@router.message(AdminState.price)
async def category_state(msg: types.Message, state: FSMContext):
    price = msg.text
    await state.update_data(price=price)
    await msg.answer(text="<b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã!</b>", reply_markup=admin_keyboard.back_admin)
    await state.set_state(AdminState.description)


@router.message(AdminState.description)
async def category_state(msg: types.Message, state: FSMContext):
    description = msg.text
    await state.update_data(description=description)
    await msg.answer(text="<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏!</b>", reply_markup=admin_keyboard.back_admin)
    await state.set_state(AdminState.img)


@router.message(AdminState.img)
async def category_state(msg: types.Message, state: FSMContext):
    img = msg.text
    await state.update_data(img=img)
    await msg.answer(text="<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω!</b>", reply_markup=admin_keyboard.back_admin)
    await state.set_state(AdminState.kolvo)


@router.message(AdminState.kolvo)
async def category_state(msg: types.Message, state: FSMContext):
    kolvo = msg.text
    await state.update_data(kolvo=kolvo)
    await msg.answer(text="<b>–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã!</b>", reply_markup=admin_keyboard.back_admin)
    await state.set_state(AdminState.engine_power)


@router.message(AdminState.engine_power)
async def category_state(msg: types.Message, state: FSMContext):
    engine_power = msg.text

    try:
        engine_power_float = float(engine_power)
        if engine_power_float <= 0:
            raise ValueError("–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await msg.answer(text="–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–æ—â–Ω–æ—Å—Ç–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è.")
        return

    await state.update_data(engine_power=engine_power)
    data = await state.get_data()
    unique_code = str(uuid.uuid4())[:8]
    await state.update_data(unique_code=unique_code)
    img_base_path = "img/"
    img_file_name = data['img']
    img_path = os.path.join(img_base_path, img_file_name + ".jpg")
    db.fill_auto_table(unique_code, data['name_auto'], data['price'], data['description'], img_path, data['kolvo'],
                       data['engine_power'])
    category_select = db.select_category()
    categories_text = "\n\n".join(
        f"<b>ID:</b> {category[0]}\n<b>–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category[1]}" for category in category_select)
    await msg.answer(text="<u>–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u>")
    await msg.answer(text=f"{categories_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>ID</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await state.set_state(AdminState.id_category)


@router.message(AdminState.id_category)
async def category_state(msg: types.Message, state: FSMContext):
    id_category = msg.text
    if not id_category.isdigit():
        await msg.answer(text="–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    data = await state.get_data()
    auto_id = db.select_auto_code(data['unique_code'])
    number = auto_id[0][0]
    db.insert_auto_category_table(number, id_category)
    await state.clear()
    await msg.answer(text="–ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


@router.callback_query(F.data == "get_auto")
async def get_categories(callback: types.CallbackQuery):
    auto_category_data = db.select_all_auto_category_data()
    message_text = "<b>–î–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–∞—Ö –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:</b>\n"
    for row in auto_category_data:
        name_auto, name_kategory = row
        message_text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã:</b> {name_auto}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {name_kategory}\n\n"

    await callback.message.answer(text=message_text)


@router.callback_query(F.data == "zayvka")
async def get_categories(callback: types.CallbackQuery):
    orders_data = db.select_all_orders_with_details()
    message_text = "<b>–î–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–∞—Ö:</b>\n"
    for row in orders_data:
        order_id, username, name_auto, price, description, img, kolvo, engine_power, status = row
        message_text += (
            f"<b>ID –∑–∞—è–≤–∫–∏:</b> {order_id}\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã:</b> {name_auto}\n"
            f"<b>–¶–µ–Ω–∞:</b> {price}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {img}\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {kolvo}\n"
            f"<b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {engine_power}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        )

    await callback.message.answer(text=message_text)


@router.message(Command("good_status"))
async def update_status_command(message: types.Message):
    if str(message.from_user.id) == ADMIN_IDS:
        text = message.text
        args = text.split()[1:]
        order_id = args[0]
        status = "–û–¥–æ–±—Ä–µ–Ω–æ ‚úîÔ∏è"
        if order_id:
            db.update_order_status(order_id, status)
            await message.answer(f"<b>ID –∑–∞–∫–∞–∑–∞:</b> {order_id}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}.")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@router.message(Command("block"))
async def update_status_command(message: types.Message):
    if str(message.from_user.id) == ADMIN_IDS:
        text = message.text
        args = text.split()[1:]
        order_id = args[0]
        status = "–ù–µ –æ–¥–æ–±—Ä–µ–Ω–æ ‚õîÔ∏è"
        if order_id:
            db.update_order_status(order_id, status)
            await message.answer(f"<b>ID –∑–∞–∫–∞–∑–∞:</b> {order_id}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}.")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
